import random
from faker import Faker

fake = Faker()

# Create restaurants dataframe
cuisine_flavors = {
    'African': ['meat', 'stew', 'curry','grill','spicy','indigenous'],
    'American': ['burger', 'bbq', 'grill','bbq','tex_mex','fry','chicken','snack','pub food','wrap','mcncheese','panini','sandwich','souce','sousage'],
    'Asian': ['noodle', 'rice', 'sushi','seafood','spicy','fermented','chicken','umami','aromatic','souce','fresh','soup'],
    'Bakery': ['bread', 'pastry', 'cake','sweet','fast',],
    'Bar': ['beer', 'cocktail', 'wine','fry','grill','snacks','souce','chicken','sousage','meat','taco','burrito'],
    'Bar Pub Brewery': ['beer', 'pub food', 'snacks','wine','vodka','gin'],
    'Wine': ['cheese', 'charcuterie', 'tapas','wine','aromatic'],
    'Burgers': ['burger', 'fries', 'milkshake','fast','snack','chicken','fry','grill','souce','sousage','meat'],
    'Cafeteria': ['sandwich', 'soup', 'salad','cofee','tea','snack','ice cream','fruit','smoothie'],
    'Coffee': ['coffee', 'tea', 'pastry','smoothie'],
    'Chinese': ['noodle', 'rice', 'dim sum','seafood','grill','chicken','sushi','aromatic','umami','chicken','fusion','spicy'],
    'Contemporary': ['fusion', 'modern', 'eclectic','aromatic','burger','pizza','meat'],
    'Sandwiches': ['sandwich', 'panini', 'wrap','fast','souce','meat','smoothie'],
    'Ice-Cream': ['ice cream', 'sorbet', 'waffle cone','smoothie'],
    'Dutch': ['stamppot', 'haring', 'poffertjes','grill','sousage','meat' ],
    'International': ['global', 'world', 'diverse','meat','chicken','grill','modern','eclectic','fusion','wrap','snack','wine','beer','taco','burrito'],
    'Fast-Food': ['burger', 'pizza', 'sandwich','chicken','grill','souce','kebab','fry','meat'],
    'French': ['cheese', 'wine', 'truffle','aromatic','wine','grill','meat','vegetable','fresh','soup'],
    'Greek': ['gyro', 'souvlaki', 'feta','meat','kebab','tapas','meat','oil','tomato','seafood','fresh'],
    'Turkish': ['kebab', 'baklava', 'pide','tapas','spicy','indigenous','meat','oil','tomato','seafood','fresh','souce','soup'],
    'Italian': ['pasta', 'pizza', 'risotto','oil','tomato','seafood','fresh','souce','soup'],
    'Japanese': ['sushi', 'ramen', 'tempura','aromatic','fusion','spicy','seafood','fresh'],
    'Juice': ['juice', 'smoothie', 'fruit','sweet'],
    'Korean': ['bbq', 'kimchi', 'bulgogi','wrap','sushi','rice','soup'],
    'Latin American': ['taco', 'burrito', 'ceviche','grill','meat'],
    'Mexican': ['taco', 'burrito', 'salsa','spicy','meat'],
    'Pizzeria': ['pizza', 'pasta','tomato','souce',],
    'Seafood': ['fish', 'shrimp', 'crab','seafood'],
    'Steaks': ['grill','bbq','potato', 'grill','meat'],
    'Vegetarian': ['salad', 'vegetable', 'tofu','cheese','herbs']
}
profile_interest=['Business-man', 'Traveller', 'Sports Person','Foodie','Student','Music','Reading','Theatre']
ambience = ['Cozy', 'Romantic','Elegant','Lively' ,'Family Friendly', 'Modern','Friendly','Music','Sport']

restaurants = []
for i in range(50):
    cuisine = random.choice(list(cuisine_flavors.keys()))
    flavors_restaurant = random.sample(cuisine_flavors[cuisine], random.randint(2,4))
    ambience_restaurant = random.sample(ambience, random.randint(1, 2))
    customer_profile_restaurant = random.sample(profile_interest, random.randint(2, 3))
    budget_rating = random.randint(1, 3)
    restaurants.append({
        'id': i,
        'cuisine': cuisine,
        'flavors': flavors_restaurant,
        'budget': budget_rating,
        'profile': customer_profile_restaurant,
        'ambiance': ambience_restaurant
    })

# Create customer dataframe
customers = []
for i in range(100):
    #creating cousine preference for customer
    numb_cuisine= random.randint(2,5)
    cuisine_preference = random.sample(tuple(cuisine_flavors.keys()),numb_cuisine)
    #creating flavor preference for customer
    flavor_preference= []
    for cuisine_ in cuisine_preference:
        numb_flavor= random.randint(2,3)
        flavor_preference.extend( random.sample(cuisine_flavors[cuisine_],numb_flavor))
    #creating interest preference for customers
    interest_number = random.randint(1,4)
    interest_customer =random.sample(profile_interest,interest_number)
    #creating ambience preference for customers
    ambience_number = random.randint(1,5)
    ambience_customer =random.sample(ambience,ambience_number)
    customers.append({
        'id': i,
        'interest_preference': interest_customer,
        'ambience_preference': ambience_customer,
        'cuisine_preference': cuisine_preference,
        'flavor_preference': flavor_preference
    })

# Create reviews dataframe
reviews = []
id_review=0
for customer in customers:
    #randomly select visited restaurants
    visited_restaurants = random.sample(restaurants, random.randint(3, 16))

    for restaurant in visited_restaurants:
        cuisine = restaurant['cuisine']
        flavor = restaurant['flavors']
        ambiance = restaurant['ambiance']
        profile = restaurant['profile']
        if (set(cuisine).intersection(customer['flavor_preference'])) or (set(flavor).intersection(customer['flavor_preference']) != set() ):
            taste_bias = random.randint(2,5) # higher bias for preferred cuisine and flavor
        else:
            taste_bias = random.randint(-3, 2) # lower bias for other cases

       
        if (set(profile).intersection(customer['interest_preference'])) or (set(ambiance).intersection(customer['ambience_preference']) != set() ):
            ambience_bias = random.randint(2,5) # higher bias for preferred ambiance
        else:
            ambience_bias = random.randint(-3, 2) # lower bias for other cases

        if random.randint(1,10) > 3: # %30 of the time restaurant is not hectic provides good service
          service_bias = random.randint(2,5)
        else:
          service_bias = random.randint(-3,2)

                
        ambiance_rating = 5 + ambience_bias
        taste_rating = 5 + taste_bias
        service_rating = 5 + service_bias
        overall = (ambiance_rating + taste_rating + service_rating)/3
        
        if overall > 7: # if the overall is in a certain rate then the customer will be more likely to visit the restaurant again
           numb_again_visits = random.randint(2,4)
           for i in range(numb_again_visits):
              if (set(cuisine).intersection(customer['flavor_preference'])) or (set(flavor).intersection(customer['flavor_preference']) != set() ):
                  taste_bias_2 = random.randint(2,5) # higher bias for preferred cuisine and flavor
              else:
                  taste_bias_2 = random.randint(-3, 2) # lower bias for other cases

              if (set(profile).intersection(customer['interest_preference'])) or (set(ambiance).intersection(customer['ambience_preference']) != set() ):
                  ambience_bias_2 = random.randint(2,5) # higher bias for preferred ambiance
              else:
                  ambience_bias_2 = random.randint(-3, 2) # lower bias for other cases

              if random.randint(1,10) > 3: # %30 of the time restaurant is not hectic provides good service
                service_bias_2 = random.randint(2,5)
              else:
                service_bias_2 = random.randint(-3,2)

                      
              ambiance_rating_2 = 5 + ambience_bias_2
              taste_rating_2 = 5 + taste_bias_2
              service_rating_2 = 5 + service_bias_2
              overall_2 = (ambiance_rating_2 + taste_rating_2 + service_rating_2)/3

              reviews.append({
                'id_review': id_review,
                'customer_id': customer['id'],
                'restaurant_id': restaurant['id'],
                'ambiance_rating': ambiance_rating_2,
                'taste_rating': taste_rating_2,
                'service_rating': service_rating_2,
                'overall_rating': overall_2
            })
              id_review= id_review+1  


        reviews.append({
            'id_review': id_review,
            'customer_id': customer['id'],
            'restaurant_id': restaurant['id'],
            'ambiance_rating': ambiance_rating,
            'taste_rating': taste_rating,
            'service_rating': service_rating,
            'overall_rating': overall
        })
        id_review= id_review+1
